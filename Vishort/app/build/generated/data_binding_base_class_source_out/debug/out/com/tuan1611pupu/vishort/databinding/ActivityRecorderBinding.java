// Generated by view binder compiler. Do not edit!
package com.tuan1611pupu.vishort.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.segmentedprogressbar.SegmentedProgressBar;
import com.munon.turboimageview.TurboImageView;
import com.otaliastudios.cameraview.CameraView;
import com.tuan1611pupu.vishort.R;
import info.hoang8f.android.segmented.SegmentedGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRecorderBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ConstraintLayout bottom;

  @NonNull
  public final CameraView camera;

  @NonNull
  public final ImageView close;

  @NonNull
  public final RelativeLayout constraintLayout;

  @NonNull
  public final TextView count;

  @NonNull
  public final LinearLayout countdown;

  @NonNull
  public final LinearLayout done;

  @NonNull
  public final LinearLayout filter;

  @NonNull
  public final RecyclerView filters;

  @NonNull
  public final LinearLayout flash;

  @NonNull
  public final LinearLayout flip;

  @NonNull
  public final LayoutNoInternetBinding noInternet;

  @NonNull
  public final ImageView record;

  @NonNull
  public final ImageView remove;

  @NonNull
  public final LinearLayout right;

  @NonNull
  public final SegmentedProgressBar segments;

  @NonNull
  public final TextView sound;

  @NonNull
  public final LinearLayout speed;

  @NonNull
  public final RadioButton speed05x;

  @NonNull
  public final RadioButton speed075x;

  @NonNull
  public final RadioButton speed15x;

  @NonNull
  public final RadioButton speed1x;

  @NonNull
  public final RadioButton speed2x;

  @NonNull
  public final SegmentedGroup speeds;

  @NonNull
  public final ImageView sticker;

  @NonNull
  public final LinearLayout stickerParent;

  @NonNull
  public final TurboImageView stickerTurbo;

  @NonNull
  public final LinearLayout timer;

  @NonNull
  public final PartialTimerSheetBinding timerSheet;

  @NonNull
  public final RelativeLayout top;

  @NonNull
  public final RelativeLayout upload;

  @NonNull
  public final RelativeLayout viewsticker;

  private ActivityRecorderBinding(@NonNull FrameLayout rootView, @NonNull ConstraintLayout bottom,
      @NonNull CameraView camera, @NonNull ImageView close,
      @NonNull RelativeLayout constraintLayout, @NonNull TextView count,
      @NonNull LinearLayout countdown, @NonNull LinearLayout done, @NonNull LinearLayout filter,
      @NonNull RecyclerView filters, @NonNull LinearLayout flash, @NonNull LinearLayout flip,
      @NonNull LayoutNoInternetBinding noInternet, @NonNull ImageView record,
      @NonNull ImageView remove, @NonNull LinearLayout right,
      @NonNull SegmentedProgressBar segments, @NonNull TextView sound, @NonNull LinearLayout speed,
      @NonNull RadioButton speed05x, @NonNull RadioButton speed075x, @NonNull RadioButton speed15x,
      @NonNull RadioButton speed1x, @NonNull RadioButton speed2x, @NonNull SegmentedGroup speeds,
      @NonNull ImageView sticker, @NonNull LinearLayout stickerParent,
      @NonNull TurboImageView stickerTurbo, @NonNull LinearLayout timer,
      @NonNull PartialTimerSheetBinding timerSheet, @NonNull RelativeLayout top,
      @NonNull RelativeLayout upload, @NonNull RelativeLayout viewsticker) {
    this.rootView = rootView;
    this.bottom = bottom;
    this.camera = camera;
    this.close = close;
    this.constraintLayout = constraintLayout;
    this.count = count;
    this.countdown = countdown;
    this.done = done;
    this.filter = filter;
    this.filters = filters;
    this.flash = flash;
    this.flip = flip;
    this.noInternet = noInternet;
    this.record = record;
    this.remove = remove;
    this.right = right;
    this.segments = segments;
    this.sound = sound;
    this.speed = speed;
    this.speed05x = speed05x;
    this.speed075x = speed075x;
    this.speed15x = speed15x;
    this.speed1x = speed1x;
    this.speed2x = speed2x;
    this.speeds = speeds;
    this.sticker = sticker;
    this.stickerParent = stickerParent;
    this.stickerTurbo = stickerTurbo;
    this.timer = timer;
    this.timerSheet = timerSheet;
    this.top = top;
    this.upload = upload;
    this.viewsticker = viewsticker;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRecorderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRecorderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_recorder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRecorderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom;
      ConstraintLayout bottom = ViewBindings.findChildViewById(rootView, id);
      if (bottom == null) {
        break missingId;
      }

      id = R.id.camera;
      CameraView camera = ViewBindings.findChildViewById(rootView, id);
      if (camera == null) {
        break missingId;
      }

      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.constraintLayout;
      RelativeLayout constraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout == null) {
        break missingId;
      }

      id = R.id.count;
      TextView count = ViewBindings.findChildViewById(rootView, id);
      if (count == null) {
        break missingId;
      }

      id = R.id.countdown;
      LinearLayout countdown = ViewBindings.findChildViewById(rootView, id);
      if (countdown == null) {
        break missingId;
      }

      id = R.id.done;
      LinearLayout done = ViewBindings.findChildViewById(rootView, id);
      if (done == null) {
        break missingId;
      }

      id = R.id.filter;
      LinearLayout filter = ViewBindings.findChildViewById(rootView, id);
      if (filter == null) {
        break missingId;
      }

      id = R.id.filters;
      RecyclerView filters = ViewBindings.findChildViewById(rootView, id);
      if (filters == null) {
        break missingId;
      }

      id = R.id.flash;
      LinearLayout flash = ViewBindings.findChildViewById(rootView, id);
      if (flash == null) {
        break missingId;
      }

      id = R.id.flip;
      LinearLayout flip = ViewBindings.findChildViewById(rootView, id);
      if (flip == null) {
        break missingId;
      }

      id = R.id.no_internet;
      View noInternet = ViewBindings.findChildViewById(rootView, id);
      if (noInternet == null) {
        break missingId;
      }
      LayoutNoInternetBinding binding_noInternet = LayoutNoInternetBinding.bind(noInternet);

      id = R.id.record;
      ImageView record = ViewBindings.findChildViewById(rootView, id);
      if (record == null) {
        break missingId;
      }

      id = R.id.remove;
      ImageView remove = ViewBindings.findChildViewById(rootView, id);
      if (remove == null) {
        break missingId;
      }

      id = R.id.right;
      LinearLayout right = ViewBindings.findChildViewById(rootView, id);
      if (right == null) {
        break missingId;
      }

      id = R.id.segments;
      SegmentedProgressBar segments = ViewBindings.findChildViewById(rootView, id);
      if (segments == null) {
        break missingId;
      }

      id = R.id.sound;
      TextView sound = ViewBindings.findChildViewById(rootView, id);
      if (sound == null) {
        break missingId;
      }

      id = R.id.speed;
      LinearLayout speed = ViewBindings.findChildViewById(rootView, id);
      if (speed == null) {
        break missingId;
      }

      id = R.id.speed05x;
      RadioButton speed05x = ViewBindings.findChildViewById(rootView, id);
      if (speed05x == null) {
        break missingId;
      }

      id = R.id.speed075x;
      RadioButton speed075x = ViewBindings.findChildViewById(rootView, id);
      if (speed075x == null) {
        break missingId;
      }

      id = R.id.speed15x;
      RadioButton speed15x = ViewBindings.findChildViewById(rootView, id);
      if (speed15x == null) {
        break missingId;
      }

      id = R.id.speed1x;
      RadioButton speed1x = ViewBindings.findChildViewById(rootView, id);
      if (speed1x == null) {
        break missingId;
      }

      id = R.id.speed2x;
      RadioButton speed2x = ViewBindings.findChildViewById(rootView, id);
      if (speed2x == null) {
        break missingId;
      }

      id = R.id.speeds;
      SegmentedGroup speeds = ViewBindings.findChildViewById(rootView, id);
      if (speeds == null) {
        break missingId;
      }

      id = R.id.sticker;
      ImageView sticker = ViewBindings.findChildViewById(rootView, id);
      if (sticker == null) {
        break missingId;
      }

      id = R.id.sticker_parent;
      LinearLayout stickerParent = ViewBindings.findChildViewById(rootView, id);
      if (stickerParent == null) {
        break missingId;
      }

      id = R.id.stickerTurbo;
      TurboImageView stickerTurbo = ViewBindings.findChildViewById(rootView, id);
      if (stickerTurbo == null) {
        break missingId;
      }

      id = R.id.timer;
      LinearLayout timer = ViewBindings.findChildViewById(rootView, id);
      if (timer == null) {
        break missingId;
      }

      id = R.id.timer_sheet;
      View timerSheet = ViewBindings.findChildViewById(rootView, id);
      if (timerSheet == null) {
        break missingId;
      }
      PartialTimerSheetBinding binding_timerSheet = PartialTimerSheetBinding.bind(timerSheet);

      id = R.id.top;
      RelativeLayout top = ViewBindings.findChildViewById(rootView, id);
      if (top == null) {
        break missingId;
      }

      id = R.id.upload;
      RelativeLayout upload = ViewBindings.findChildViewById(rootView, id);
      if (upload == null) {
        break missingId;
      }

      id = R.id.viewsticker;
      RelativeLayout viewsticker = ViewBindings.findChildViewById(rootView, id);
      if (viewsticker == null) {
        break missingId;
      }

      return new ActivityRecorderBinding((FrameLayout) rootView, bottom, camera, close,
          constraintLayout, count, countdown, done, filter, filters, flash, flip,
          binding_noInternet, record, remove, right, segments, sound, speed, speed05x, speed075x,
          speed15x, speed1x, speed2x, speeds, sticker, stickerParent, stickerTurbo, timer,
          binding_timerSheet, top, upload, viewsticker);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
